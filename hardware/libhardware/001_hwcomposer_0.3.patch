diff --git a/hardware/libhardware/include/hardware/fb.h b/hardware/libhardware/include/hardware/fb.h
index 9df9416..94afed6 100644
--- a/hardware/libhardware/include/hardware/fb.h
+++ b/hardware/libhardware/include/hardware/fb.h
@@ -48,18 +48,32 @@ typedef struct framebuffer_device_t {
     const uint32_t  flags;
 
     /* dimensions of the framebuffer in pixels */
+#ifndef STE_HARDWARE
     const uint32_t  width;
     const uint32_t  height;
+#else
+    uint32_t  width;
+    uint32_t  height;
+#endif
 
     /* frambuffer stride in pixels */
+#ifndef STE_HARDWARE
     const int       stride;
+#else
+    int       stride;
+#endif
 
     /* framebuffer pixel format */
     const int       format;
 
     /* resolution of the framebuffer's display panel in pixel per inch*/
+#ifndef STE_HARDWARE
     const float     xdpi;
     const float     ydpi;
+#else
+    float     xdpi;
+    float     ydpi;
+#endif
 
     /* framebuffer's display panel refresh rate in frames per second */
     const float     fps;
@@ -150,6 +164,27 @@ typedef struct framebuffer_device_t {
      */
     int (*enableScreen)(struct framebuffer_device_t* dev, int enable);
 
+#ifdef STE_HARDWARE
+    /*
+     * Sets the number of degrees ccw the framebuffer shall be rotated before
+     * being sent to the display. This call may change the framebuffer's
+     * dimensions.
+     */
+    int (*rotate)(struct framebuffer_device_t* dev, unsigned int absolute_degree);
+
+    /*
+     * Informs gralloc about the UI rotation. This is needed in the mirroring use
+     * case to get the correct orientation on the external device, e.g. HDMI.
+     */
+    void (*UIRotationChange)(struct framebuffer_device_t* dev, int uiRotation);
+
+    /*
+     * Enables the mirroring of the main display content to an external device,
+     * e.g. HDMI.
+     */
+    void (*enableHDMIMirroring)(struct framebuffer_device_t* dev, int enable);
+#endif
+
     void* reserved_proc[6];
 
 } framebuffer_device_t;
diff --git a/hardware/libhardware/include/hardware/hwcomposer_defs.h b/hardware/libhardware/include/hardware/hwcomposer_defs.h
index 4821594..2672378 100644
--- a/hardware/libhardware/include/hardware/hwcomposer_defs.h
+++ b/hardware/libhardware/include/hardware/hwcomposer_defs.h
@@ -44,6 +44,18 @@ __BEGIN_DECLS
 #define HWC_DEVICE_API_VERSION_1_4  HARDWARE_DEVICE_API_VERSION_2(1, 4, HWC_HEADER_VERSION)
 #endif
 
+#ifdef STE_HARDWARE
+/* STE specific modifications to the hwcomposer API require
+ * a separate DEVICE_API_VERSION since the resulting structures
+ * aren't binary compatible with the vanilla android version.
+ * We don't actually change the version number itself since
+ * that could potentially conflict with future versions of hwcomposer.
+ * Rather we just add the possibility to check for the presence
+ * of STE modifications.
+ */
+#define HWC_DEVICE_API_VERSION_0_3_STE HWC_DEVICE_API_VERSION_0_3
+#endif
+
 enum {
     /* hwc_composer_device_t::set failed in EGL */
     HWC_EGL_ERROR = -1
diff --git a/hardware/libhardware/include/hardware/hwcomposer_v0.h b/hardware/libhardware/include/hardware/hwcomposer_v0.h
index 473819b..a40deff 100644
--- a/hardware/libhardware/include/hardware/hwcomposer_v0.h
+++ b/hardware/libhardware/include/hardware/hwcomposer_v0.h
@@ -57,8 +57,38 @@ typedef struct hwc_methods {
     int (*eventControl)(
             struct hwc_composer_device* dev, int event, int enabled);
 
+#ifdef STE_HARDWARE
+    /*************************************************************************
+     * HWC_DEVICE_API_VERSION_0_3_STE
+     *************************************************************************/
+
+    /*
+     * This hook is vendor specific and optional.
+     *
+     * (*setParameter)() makes the hardware composer aware of the system state,
+     * e.g. hdmi plug status and ui rotation, so that it can make intelligent
+     * decisions on how to handle composed surfaces and cloning in the kernel.
+     */
+    int (*setParameter)(struct hwc_composer_device* dev,
+                int param, int value);
+#endif
+
 } hwc_methods_t;
 
+#ifdef STE_HARDWARE
+/*
+ * names for setParameter()
+ */
+enum {
+    /* Specifies the UI orientation */
+    HWC_UI_ORIENTATION = 0x00000000,
+    /* Specifies if hardware rotation is used */
+    HWC_HARDWARE_ROTATION = 0x00000001,
+    /* Set the hdmi plug status */
+    HWC_HDMI_PLUGGED = 0x00000002,
+};
+#endif
+
 typedef struct hwc_layer {
     /*
      * initially set to HWC_FRAMEBUFFER or HWC_BACKGROUND.
